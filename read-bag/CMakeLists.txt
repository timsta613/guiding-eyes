#  minimum required cmake version: 3.1.0
cmake_minimum_required(VERSION 3.1.0)

project(Camera-Motor)

# Save the command line compile commands in the build output
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Make project require C++11
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
endif()

# Simple non robust way to find the librealsense library
if(WIN32)
    if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
        set(LIBRARY_DIR "C:\\Program Files (x86)\\Intel RealSense SDK 2.0\\lib\\x64")          # TODO: Update this variable to correct path - folder where realsense2.lib is found
        set(DLL_DIR "C:\\Program Files (x86)\\Intel RealSense SDK 2.0\\bin\\x64")              # TODO: Update this variable to correct path - folder where realsense2.dll is found
    else()
        set(LIBRARY_DIR "C:\\Program Files (x86)\\Intel RealSense SDK 2.0\\lib\\x86")          # TODO: Update this variable to correct path - folder where realsense2.lib is found
        set(DLL_DIR "C:\\Program Files (x86)\\Intel RealSense SDK 2.0\\bin\\x86")              # TODO: Update this variable to correct path - folder where realsense2.dll is found
    endif()
    set(PROJECT_BINARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/\$\(Configuration\)")                # TODO: Update this variable to correct path - folder to which your project will compile
    set(ADDITIONAL_INCLUDE_DIRS "C:\\Program Files (x86)\\Intel RealSense SDK 2.0\\include")   # TODO: Update this variable to correct path - folder where librealsense2 folder is found
endif()


set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

add_subdirectory(third-party/glfw)
find_library(REALSENSE2_FOUND realsense2 HINTS ${LIBRARY_DIR} REQUIRED)
find_library(WIRINGPI_FOUND wiringPi HINTS ${LIBRARY_DIR} REQUIRED)
find_library(CRYPT_FOUND crypt)
find_package(OpenCV REQUIRED)
find_package(glfw3 3.1 REQUIRED)
find_package(OpenGL REQUIRED)
if(NOT REALSENSE2_FOUND)
    SET(REALSENSE2_FOUND "realsense2")
    message(WARN "Failed to find_library(realsense2)")
endif()
if(NOT WIRINGPI_FOUND)
    SET(WIRINGPI_FOUND "wiringPi")
    message(WARN "Failed to find_library(wiringPi)")
endif()
# getting-started
add_executable(camera-motor camera-motor.cpp ./example.hpp ./third-party/imgui/imgui.cpp ./third-party/imgui/imgui_draw.cpp ./third-party/imgui/imgui_impl_glfw.cpp)
include_directories(camera-motor ${ADDITIONAL_INCLUDE_DIRS})
include_directories(camera-motor ${OPENGL_INCLUDE_DIR})
include_directories(third-party/glfw/include)
target_link_libraries(camera-motor ${REALSENSE2_FOUND})
target_link_libraries(camera-motor ${WIRINGPI_FOUND})
target_link_libraries(camera-motor ${CRYPT_FOUND})
target_link_libraries(camera-motor ${OpenCV_LIBS})
target_link_libraries(camera-motor ${OPENGL_gl_LIBRARY})
target_link_libraries(camera-motor ${DEPENDENCIES})
target_link_libraries(camera-motor glfw ${OPENGL_glu_LIBRARY} ${GLFW_LIBRARIES})
include_directories(camera-motor ./third-party/tclap/include ./third-party/imgui)
set_target_properties (camera-motor PROPERTIES FOLDER Examples)

# Post Build script to copy realsense2.dll
if(WIN32)
message(STATUS "Adding Post build script to copy realsense2.dll to project's binary folder")
message(STATUS "Will try to copy from ${DLL_DIR} to ${PROJECT_BINARY_OUTPUT_PATH}")
add_custom_command(TARGET rs-getting-started POST_BUILD        # Adds a post-build event to rs-getting-started
    COMMAND ${CMAKE_COMMAND} -E copy_if_different              # which executes "cmake - E copy_if_different..."
        "${DLL_DIR}/realsense2.dll"                            # <--this is in-file
        ${PROJECT_BINARY_OUTPUT_PATH})                 # <--this is out-file path
endif()

install(
    TARGETS

    camera-motor

    RUNTIME DESTINATION
    ${CMAKE_INSTALL_PREFIX}/bin
)
